{
	"name": "AssertDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_src1_assert",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_src2_assert",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_assert",
						"type": "DatasetReference"
					},
					"name": "AssertSink"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          age as string,",
				"          domain as string,",
				"          d_id as string,",
				"          batch as string,",
				"          doj as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          d_id as string,",
				"          domain as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 assert(expectTrue(!isNull(toDate(doj,'yyyymmdd')), false, 'assertdoj'),",
				"     expectExists(source1@d_id == source2@d_id, false, 'assertdeptid'),",
				"     expectUnique(id, false, 'assertunique')) ~> assert1",
				"assert1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['asserted_file'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> AssertSink"
			]
		}
	}
}