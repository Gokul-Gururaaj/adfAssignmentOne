{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "gokulazuredf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/UntilPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('condition'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_delete",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata1').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "condition",
													"value": "false"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Delete1",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ds_delete",
														"type": "DatasetReference",
														"parameters": {}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "AzureDataLakeStorage1",
															"type": "LinkedServiceReference"
														}
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"condition": {
						"type": "String",
						"defaultValue": "true"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-10T12:26:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidationPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_delete",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.12:00:00",
							"sleep": 10,
							"childItems": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-10T12:26:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/email-alerter-pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Unsuccessful_copy_activity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Wrong_Data_set",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Email-alerter",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Unsuccessful_copy_activity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-21.northcentralus.logic.azure.com:443/workflows/40640ccef3ad46838947b27b87e7e7eb/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=NGDJZyLgknRZqzBgSCt6F1vyO4HQ88YDzLQ3yllz4ss",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"to-address\":\"gokul.gururaaj@elait.com\",\n    \"subject\":\"ADF Pipeline failed\",\n    \"Pipeline\":\"@{pipeline().Pipeline}\",\n    \"DataFactoryName\":\"@{pipeline().DataFactory}\",\n    \"RunID\":\"@{pipeline().RunId}\",\n    \"ErrorMessage\":\"@{activity('Unsuccessful_copy_activity').output.errors[0].Message}\"\n    \n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-10T09:45:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/exptgetmetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetMetaDataSource",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ForEachSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ForeachDesTtable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-10T17:57:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/exptlookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "GetMetaDataSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFileName": "*",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ForEachSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ForEachDestination",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-10T17:57:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/loadinginformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Loading_Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-07T12:23:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/multifilestransferpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Getting Metadata of Multiple files folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetMetaDataSource",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Looping the multiple files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Getting Metadata of Multiple files folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Getting Metadata of Multiple files folder').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copying each file to single destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": "source-folder",
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ForEachSource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ForEachDestination",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-10T17:57:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline-execution-details')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Loading_Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[loggingdetails]",
							"storedProcedureParameters": {
								"pipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineRunid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineTriggerid": {
									"value": {
										"value": "@pipeline().TriggerId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineTriggername": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineTriggertime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelineTriggertype": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Loading_Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-07T12:26:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AssertDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src1_assert",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_src2_assert",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_assert",
								"type": "DatasetReference"
							},
							"name": "AssertSink"
						}
					],
					"transformations": [
						{
							"name": "assert1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          age as string,",
						"          domain as string,",
						"          d_id as string,",
						"          batch as string,",
						"          doj as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          d_id as string,",
						"          domain as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 assert(expectTrue(!isNull(toDate(doj,'yyyymmdd')), false, 'assertdoj'),",
						"     expectExists(source1@d_id == source2@d_id, false, 'assertdeptid'),",
						"     expectUnique(id, false, 'assertunique')) ~> assert1",
						"assert1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['asserted_file'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> AssertSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlattenDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_flatten",
								"type": "DatasetReference"
							},
							"name": "JsonFormatFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_flatten",
								"type": "DatasetReference"
							},
							"name": "FlattenedFile"
						}
					],
					"transformations": [
						{
							"name": "FlateningSkillColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          contact as (landline as integer, mobile as integer),",
						"          name as string,",
						"          skills as string[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments',",
						"     partitionBy('hash', 1)) ~> JsonFormatFile",
						"JsonFormatFile foldDown(unroll(skills),",
						"     mapColumn(",
						"          skills,",
						"          name",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlateningSkillColumn",
						"FlateningSkillColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FlattenedFile'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FlattenedFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src1_join",
								"type": "DatasetReference"
							},
							"name": "bill"
						},
						{
							"dataset": {
								"referenceName": "ds_src2_join",
								"type": "DatasetReference"
							},
							"name": "prodPriceList"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_join",
								"type": "DatasetReference"
							},
							"name": "BillList"
						}
					],
					"transformations": [
						{
							"name": "billing"
						},
						{
							"name": "RequiredDetails"
						},
						{
							"name": "DerivingPriceForTheQTY"
						},
						{
							"name": "TotalPriceForEachBill"
						}
					],
					"scriptLines": [
						"source(output(",
						"          bill_id as short,",
						"          prod_id as short,",
						"          name as string,",
						"          quantity as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> bill",
						"source(output(",
						"          prod_id as short,",
						"          name as string,",
						"          price as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> prodPriceList",
						"bill, prodPriceList join(bill@prod_id == prodPriceList@prod_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> billing",
						"billing select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredDetails",
						"RequiredDetails derive(priceWithQTY = (quantity*price)) ~> DerivingPriceForTheQTY",
						"DerivingPriceForTheQTY aggregate(groupBy(bill_id),",
						"     Total_Bill_Price = sum(priceWithQTY),",
						"     partitionBy('hash', 1)) ~> TotalPriceForEachBill",
						"TotalPriceForEachBill sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['List of the bills'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> BillList"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src1_lookup",
								"type": "DatasetReference"
							},
							"name": "bill"
						},
						{
							"dataset": {
								"referenceName": "ds_src2_lookup",
								"type": "DatasetReference"
							},
							"name": "prdctPriceList"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ListOfBills",
								"type": "DatasetReference"
							},
							"name": "ListOfBills"
						}
					],
					"transformations": [
						{
							"name": "BillingLookup"
						},
						{
							"name": "RequiredDetails"
						},
						{
							"name": "DerivingPriceWithQTY"
						},
						{
							"name": "TotalPriceForEachBill"
						},
						{
							"name": "AddingSurrogateKey"
						}
					],
					"scriptLines": [
						"source(output(",
						"          bill_id as short,",
						"          prod_id as short,",
						"          name as string,",
						"          quantity as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> bill",
						"source(output(",
						"          prod_id as short,",
						"          name as string,",
						"          price as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> prdctPriceList",
						"bill, prdctPriceList lookup(bill@prod_id == prdctPriceList@prod_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> BillingLookup",
						"BillingLookup select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RequiredDetails",
						"RequiredDetails derive(PriceWithQTY = (quantity*price)) ~> DerivingPriceWithQTY",
						"DerivingPriceWithQTY aggregate(groupBy(bill_id),",
						"     Total_Bill_Price = sum(PriceWithQTY)) ~> TotalPriceForEachBill",
						"TotalPriceForEachBill keyGenerate(output({S.No.} as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddingSurrogateKey",
						"AddingSurrogateKey sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ListOfBills'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ListOfBills"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParseDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_parse",
								"type": "DatasetReference"
							},
							"name": "FileWithFormattedData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_parse",
								"type": "DatasetReference"
							},
							"name": "ParsedFile"
						}
					],
					"transformations": [
						{
							"name": "ParsingSkillColumn"
						},
						{
							"name": "ParsingPhoneColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          age as integer,",
						"          skills as string,",
						"          phonenos as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FileWithFormattedData",
						"FileWithFormattedData parse(skills = skills ? (skill1 as string,",
						"          skill2 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> ParsingSkillColumn",
						"ParsingSkillColumn parse(phonenos = phonenos ? (main as string,",
						"          aleternate as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> ParsingPhoneColumn",
						"ParsingPhoneColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ParsedFile'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          name,",
						"          gender,",
						"          age,",
						"          skill1 = skills.skill1,",
						"          skill2 = skills.skill2,",
						"          main = phonenos.main,",
						"          aleternate = phonenos.aleternate",
						"     ),",
						"     partitionBy('hash', 1)) ~> ParsedFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PivotDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_pivot",
								"type": "DatasetReference"
							},
							"name": "EmployedOrNotDetails"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_pivot",
								"type": "DatasetReference"
							},
							"name": "EmploymentBasedOnStateSink",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "EmploymentBasedOnState"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          gender as string,",
						"          employment as string,",
						"          state as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> EmployedOrNotDetails",
						"EmployedOrNotDetails pivot(groupBy(state),",
						"     pivotBy(employment),",
						"     {} = count(name),",
						"     columnNaming: '$N$V',",
						"     lateral: true,",
						"     partitionBy('hash', 1)) ~> EmploymentBasedOnState",
						"EmploymentBasedOnState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PivotedBasedOnState.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> EmploymentBasedOnStateSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RemovingDuplicateRows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_source_removing_dup_rows",
								"type": "DatasetReference"
							},
							"name": "FileWithDuplicates"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_duplicate_row_remover",
								"type": "DatasetReference"
							},
							"name": "FileWithOutDuplicates"
						}
					],
					"transformations": [
						{
							"name": "duplicaterowremover"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          student_name as string,",
						"          age as short,",
						"          gender as string,",
						"          dept as string,",
						"          sec as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FileWithDuplicates",
						"FileWithDuplicates aggregate(groupBy(id),",
						"     each(match(name!='id'), $$ = first($$)),",
						"     partitionBy('hash', 1)) ~> duplicaterowremover",
						"duplicaterowremover sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['stuent_attendance_list_without_duplicates'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          student_name,",
						"          age,",
						"          gender,",
						"          dept,",
						"          sec",
						"     ),",
						"     partitionBy('hash', 1)) ~> FileWithOutDuplicates"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformationOneDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TransformationOneSource",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TransformationOneSink",
								"type": "DatasetReference"
							},
							"name": "PassedStudentsList"
						},
						{
							"dataset": {
								"referenceName": "TransformationOneSink",
								"type": "DatasetReference"
							},
							"name": "ToppersList"
						},
						{
							"dataset": {
								"referenceName": "TransformationOneSink",
								"type": "DatasetReference"
							},
							"name": "FailuresList"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "split1"
						},
						{
							"name": "AveragingMarks"
						},
						{
							"name": "GivingRank"
						},
						{
							"name": "SortedAccordingToID"
						},
						{
							"name": "Toppers"
						},
						{
							"name": "AverageMarks"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          age as short,",
						"          dept as string,",
						"          sub1 as short,",
						"          sub2 as short,",
						"          sub3 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          id,",
						"          dept,",
						"          sub1,",
						"          sub2,",
						"          sub3",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 split((sub1>49)&&(sub2>49)&&(sub3>49),",
						"     disjoint: false,",
						"     partitionBy('hash', 1)) ~> split1@(passedouts, failures)",
						"split1@passedouts derive(average_marks = (sub1+sub2+sub3)/3,",
						"     partitionBy('hash', 1)) ~> AveragingMarks",
						"AveragingMarks rank(desc(average_marks, true),",
						"     output(Rank as long),",
						"     partitionBy('hash', 1)) ~> GivingRank",
						"GivingRank sort(asc(id, true),",
						"     partitionBy('hash', 1)) ~> SortedAccordingToID",
						"SortedAccordingToID filter(average_marks>80) ~> Toppers",
						"split1@failures derive(Avg = (sub1+sub2+sub3)/3,",
						"     partitionBy('hash', 1)) ~> AverageMarks",
						"SortedAccordingToID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Passed_Students_List'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PassedStudentsList",
						"Toppers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ToppersList'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ToppersList",
						"AverageMarks sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['FailuresList'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          dept,",
						"          sub1,",
						"          sub2,",
						"          sub3,",
						"          Avg",
						"     ),",
						"     partitionBy('hash', 1)) ~> FailuresList"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UnionDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src1_union",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_src2_union",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_union",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          age as string,",
						"          domain as string,",
						"          d_id as string,",
						"          batch as string,",
						"          doj as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          d_id as string,",
						"          domain as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/alteringRowDataPipeline')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "fileSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sqlSink"
						}
					],
					"transformations": [
						{
							"name": "alteringrow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          age as short,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> fileSource",
						"fileSource alterRow(upsertIf(true())) ~> alteringrow",
						"alteringrow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          name as string,",
						"          age as integer,",
						"          dept as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          age,",
						"          dept",
						"     ),",
						"     partitionBy('hash', 1)) ~> sqlSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/existsdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src1_exists",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_src2_exists",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_exists",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          name as string,",
						"          age as short,",
						"          domain as string,",
						"          d_id as short,",
						"          batch as short,",
						"          doj as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          d_id as short,",
						"          domain as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 exists(source1@d_id == source2@d_id,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['existsfile'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/row_merger_data_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_merger",
								"type": "DatasetReference"
							},
							"name": "sourceForMerging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sink_merger",
								"type": "DatasetReference"
							},
							"name": "sinkForMerging"
						}
					],
					"transformations": [
						{
							"name": "skillMerger"
						},
						{
							"name": "derivedColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as short,",
						"          student_name as string,",
						"          age as short,",
						"          gender as string,",
						"          skills as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> sourceForMerging",
						"sourceForMerging aggregate(groupBy(id),",
						"     skills = collect(skills),",
						"          age = first(age),",
						"          gender = first(gender),",
						"          student_name = first(student_name)) ~> skillMerger",
						"skillMerger derive(skills = replace(replace(replace(toString(skills),'[',''),'\"',''),']','')) ~> derivedColumn",
						"derivedColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['merged_student_skills'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          skills,",
						"          age,",
						"          gender,",
						"          student_name",
						"     ),",
						"     partitionBy('hash', 1)) ~> sinkForMerging"
					]
				}
			},
			"dependsOn": []
		}
	]
}